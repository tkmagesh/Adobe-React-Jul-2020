JavaScript
    Data Types
        Number, Boolean, String, Object, Function, Undefined
    Contsructs
        var, if else, switch case, while, for, try catch finally, throw, function
    APIs
        Date, Object, Array, Math, setTimeout, clearTimeout, setInterval, clearInterval, Error


loosely typed
    var x = 10;
    x = 'abc';
    x * 2

objects
    dictionary (key/value pairs)
    dynamic
    method = attribute whose value is a function

functions are first class citizens (functions are like objects)
    higher order functions
    when invoked two implicit objects are passed to the function (this, arguments)
    arguments = array like object containing all the arguments passed to the function

this context (invocation context) ('this' changes based on how the function is invoked)
    - As a method of an obj
        this => obj
    - As a normal function
        this => global (window)
    - Using the call method of the function (self study)
    - Using the apply method of the function (self study)

closure
    scope

    spinner
        - up()
        - down()

    var spinner = {
        counter : 0,
        up : function(){
            return ++this.counter;
        },
        down : function(){
            return --this.counter;
        }
    }

    function spinnerFactory(){
        var counter = 0;
        function up(){
            return ++counter;
        }
        function down(){
            return --counter;
        }
        return { up : up, down : down}
    }

    var spinner = spinnerFactory();
    
Prototypal Inheritance
    One object (prototype object) acts as the base object for a family of objects

    The 'family of objects' are created using a function called 'constructor function'

    'constructor function' (aka class) is a regular function but invoked with the 'new' keyword
        when invoked with a new keyword
            this => new object
            this => returned by default

    The convention is that the constructor function names start with an uppercase

    Example
    function Employee(id, name, salary){
        this.id = id;
        this.name = name;
        this.salary = salary;
    }
    var emp = new Employee(100, 'Magesh', 10000)
    typeof Employee.prototype
    Employee.prototype['city'] = 'Bangalore'
    Employee.prototype['display'] = function(){
        console.log(this.id, this.name, this.salary, this.city);
    };
    emp.display()
    var emp2 = new Employee(200, 'Suresh', 20000)
    emp2.display()

    
ES6 (EcmaScript 6 / ES2015) (http://es6-features.org)
    Transpiler (Babeljs.io)

1. let
2. const
3. array destructuring
4. rest operator (array)
5. spread operator (array)
6. object destructuring
7. rest operator (object)
8. spread operator (object)
9. default arguments
10. arrow functions
11. template strings
12. object construction enhancements
13. classes

class Employee{
    private id : number = 0;
}
var emp = new Employee();
emp.id = 1000;

    tsc

class Employee{
    id  = 0;
}
var emp = new Employee();
emp.id = 1000;


Component
    Can be used to represent one part of the UI
    Encapsulation of presentation (jsx) + state + behavior (UI)
    App UI = composition of components


Data (state)

    Presenation
        UI State
        Likely that only the component might be interested in it
        component state is ok

    Domain
        App State
        Likely that all the parts of the application might be interested in it
        component state is NOT ok


Common container for data.
container to be able to notify when the data is changing
uniform approach to change the data


Bug Tracker
    (done) 1. Add new bugs
    (done) 2. List the added bugs
    (done) 3. Remove any bug
    (done) 4. Toggle the closed status of any bug
    (done) 5. Remove closed bugs
    (done) 6. Display Stats ( # of closed bugs / total # of bugs )
    7. Sort the bugs (assignment)
    8. Persist the bugs in the server
    9. Make the bugs accessible using unique urls
    10. Write unit tests
    11. Package and deployment

React App
    web server
    babel
    js bundler
    css bundler
    version the resources

create-react-app 

npx create-react-app bug-tracker-app

if you want to use yarn, install it by running the following command
npm install yarn -g

ES6 Modules
    Everything defined in a js file considered private
    Anything to be exposed to the outside world has to be explicity exported
    If the exported entities are needed in another js file, they have be explicity imported

Component Lifecycle events
    Mount
        componentWillMount
        componentDidMount
    Update
        shouldComponentUpdate
        componentWillUpdate
        //render
    Unmount
        componentWillUnmount

react-redux
    connect
    Provider


Container / Smart components
    Those that interface with the redux (typically using the 'connect' API)

Presentation / Dumb components
    These receive the data and actions from the container/smart components

Promise

Asynchronous Operations
    callbacks
    events
    promises
    async await
    generators
    observables

What is an async operation?
    An operation that is initiated but not waited for completion

    Promise (resolved, rejected)
        then (fn) (when the promise is resolved)
        catch (fn) (when the promise is rejected)


function add(x,y){
    console.log(`    [@Service] processing ${x} and ${y}`);
    const promise = new Promise(function(resolveFn, rejectFn){
         setTimeout(() => {
            const result = x + y;
            console.log(`    [@Service] returning result`);
            resolveFn(result);
         }, 4000);
    });
    return promise;
}

console.log(`[@client] triggering add`);
var p = add(100,200);
p.then(function(result){
    console.log(`[@client] result = ${result}`);
})

DoSomething()
    .then(doSomethingElse)
    .then(doSomethingElse)
    .then(doSomethingElse)


Routing
    Clientside part of the url


Assignments: 
    1. Implement 'Apply Filter' functionality
    2. Add the 'description' to the bug entity
    3. Create a 'bug details' route to display individual bug information
